<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-07-26T23:22:10-04:00</updated><id>/</id><title type="html">Hackrnaut</title><subtitle>Pressing keys and making things happen, then writing about it. For you, for me, for everyone.
</subtitle><entry><title type="html">How To Make A Jekyll Site</title><link href="/2017/07/25/how-to-make-a-jekyll-site.html" rel="alternate" type="text/html" title="How To Make A Jekyll Site" /><published>2017-07-25T00:00:00-04:00</published><updated>2017-07-25T00:00:00-04:00</updated><id>/2017/07/25/how-to-make-a-jekyll-site</id><content type="html" xml:base="/2017/07/25/how-to-make-a-jekyll-site.html">&lt;h1 id=&quot;how-to-create-a-jekyll-35-blog-site&quot;&gt;How to Create a Jekyll 3.5 Blog Site&lt;/h1&gt;

&lt;h2 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; according to their site “…is a simple, blog-aware, static site generator.” That sure is a fancy definition but what does it mean? What Jekyll allows you to do is write &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;markdown&lt;/a&gt; files and turn them into static HTML pages. Jekyll is especially awesome because you can actually host your Jekyll content site for free via &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;Github&lt;/a&gt;. I find that Jekyll is great way for developers (or anyone code savvy) to host a simple, static, content site (like a blog or portfolio site).&lt;/p&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;If you do not already know, the &lt;a href=&quot;https://pages.github.com/&quot;&gt;Gitgub Pages&lt;/a&gt; feature allows you to host static HTML pages on github for free. To get started with this, all you need to do is create a repo with a name in the following format: your_username.github.io. Once you do this, you can put any static html file in there with the name index.html and it will be the home page of you site. For example, my username is moalamin, my github pages link is: “&lt;a href=&quot;https://moalamin.github.io&quot;&gt;https://moalamin.github.io&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Once you created a repo on your github with the correct format, you are free to code your static site however you want. Clone the repo and code away! Just remember, the homepage will always be the index.html file at the root of your repo. However, if you do not want to spend too much time coding up your entire site, what you can do is generate a Jekyll site. Due to the way Jekyll works, it will generate an index.html file for you in the root directory, with a preinstalled theme that you can fully customize and add to.&lt;/p&gt;

&lt;h2 id=&quot;installing-jekyll&quot;&gt;Installing Jekyll&lt;/h2&gt;
&lt;p&gt;In order to install Jekyll and have it work with your site, you need to have &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.1.0&lt;/code&gt; or higher installed on your computer along with the &lt;a href=&quot;http://bundler.io/&quot;&gt;bundler gem&lt;/a&gt;. You can check which version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; you have installed by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; into your terminal. Once you confirm you have the propper version of Ruby installed, go ahead and install the &lt;a href=&quot;http://bundler.io/&quot;&gt;bundler gem&lt;/a&gt;. If you ever want to check if you have an utility installed and exposed to your Terminal session, you can type &lt;code class=&quot;highlighter-rouge&quot;&gt;which utility_name&lt;/code&gt;, for example, for bundler I can write &lt;code class=&quot;highlighter-rouge&quot;&gt;which bundler&lt;/code&gt;. if are shown a directory, that means the utility is installed.&lt;/p&gt;

&lt;p&gt;Confirm that you have &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; installed. The next step is to install the Jekyll gem. You can do so by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt; into your terminal. With jekyll installed, navigate to a directory where you want to create your jekyll project. Create a new Jekyll project by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new name-of-github-pages-repo&lt;/code&gt;. You want to keep the name of the folder the same as your github pages repo for consistencies sake. You can &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into your repo and there you have it, you have successfully generate your Jekyll project. In the Jekyll project directory, run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; in the terminal and you will be to visit your site at localhost:4000, similar to how you visit a Rails server or Express server. This is how your site will look like when users visit them. By default Jekyll ships with the minima theme, you can change this at will.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-jekyll-site-on-github&quot;&gt;Getting the Jekyll site on GitHub&lt;/h2&gt;
&lt;p&gt;Now let’s get your new site up on github. This is pretty standard, just initialize your Jekyll project folder with &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;. Do your initial &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m 'first commit message'&lt;/code&gt;. Go ahead and get the link to the repo you created earlier and do &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote set origin link-to-repo&lt;/code&gt; . The last step is to push your project folder with &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt; (or a branch if you created one)/&lt;/p&gt;

&lt;p&gt;You did it! Your site should be up in a couple of minutes with the front page showing whatever blog entries you have written so far. Go ahead and give yourself a pat on the back.&lt;/p&gt;

&lt;h2 id=&quot;summary-and-additional-resources&quot;&gt;Summary and Additional Resources&lt;/h2&gt;
&lt;p&gt;This blog went over the basics of github pages and how to get a &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site on there. You can go ahead and customize your site. I found it a little confusing to customize Jekyll 3.5, &lt;a href=&quot;https://github.com/jekyll/minima#customization&quot;&gt;check the docs here&lt;/a&gt; for some tips. You can find the &lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme installed on your computer by using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle show minima&lt;/code&gt; command and then navigating to the directory shown. You can customize any file by copying it over to your project folder, but remember to keep the folder structure and file name the same as it is in your &lt;code class=&quot;highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme structure.&lt;/p&gt;

&lt;p&gt;A quick way to customize your site is by looking in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file that was generate by Jekyll and filling in the information it asks for.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;</content><author><name></name></author><summary type="html">How to Create a Jekyll 3.5 Blog Site</summary></entry><entry><title type="html">Arrays And Hashes In Ruby</title><link href="/2017/07/19/arrays-and-hashes-in-ruby.html" rel="alternate" type="text/html" title="Arrays And Hashes In Ruby" /><published>2017-07-19T00:00:00-04:00</published><updated>2017-07-19T00:00:00-04:00</updated><id>/2017/07/19/arrays-and-hashes-in-ruby</id><content type="html" xml:base="/2017/07/19/arrays-and-hashes-in-ruby.html">&lt;h1 id=&quot;arrays-and-hashes-in-ruby&quot;&gt;Arrays and Hashes in Ruby&lt;/h1&gt;

&lt;p&gt;In Ruby, two common ways to store information about a certain set of data are Arrays and Hashes. These are both indexed collections of data, meaning that when you want to pull a certain piece of information from the colections, you can refer to the data using the ‘index’ of the array or hash. The index is the ‘key’, and the data that lies at that certain index is the ‘value’, creating a key and value pair for each piece of data. However, the way indexes of each system works are different. Therefore, when using each, one should think about the purpose of the data and how they will use it. Since we are talking about two systems that do similar things, I will talk about them separately.&lt;/p&gt;

&lt;p&gt;Arrays are one of the most common data structures used all accross the programming spectrum. As I explained before, it uses a key and value system to store information and retrieve it. You can create an empty array in Ruby using: &lt;code class=&quot;highlighter-rouge&quot;&gt;array_name = []&lt;/code&gt; , the brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;'[]'&lt;/code&gt; indicate that the variable is of the Array class, and is an array. At this point you can store things in the array like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;array_ name &amp;lt;&amp;lt; 'sample data'&lt;/code&gt; , in this case I am storing a string. The cool thing about arrays is that you can store any kind of data that you desire at any index. This means that you can store a String object type in one index and a integer from Fixnum in another if you so desire, making arrays very flexible and powerful.&lt;/p&gt;

&lt;p&gt;Now that we know how to create an empty array, let’s talk about creating an array that already has data that is stored initially. To do this, you simply have to put the data you want to store in the array between the brackets like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;number_array = [1,2,3,4,5]&lt;/code&gt;, note how each number is separated by a comma, this indicatesthat they are separate pieces of data. The created array will hold the data indicated in the variable declaration.&lt;/p&gt;

&lt;p&gt;So now we know how to create an empty array, and a full one, but how do we actually refer to the data we are storing? In order to do this, let me show how a visual:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/array_index.gif&quot; alt=&quot;Array Index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This diagram shows how array indexing works. Think of each index in the array as a cell that holds the data. The indexes all have a unique number that starts from 0 as the first index and ends at the size of the array - 1. This means that if I have an array with 5 pieces of data, the first index would be 0 and the last index would be 4. &lt;strong&gt;This is very important to remember in arrays.&lt;/strong&gt; It easy to confuse the first element as being at index 1 and not 0, so keep that in mind whenever you work with arrays. Consequently, the last of index of the array is the size of the array - 1. Now that you see how the index works, it is easy to retrieve a peice of data at a certain index. To do this, use the name of the array, and the index which you want to retrieve. For example if I had an array with 5 elements like: &lt;code class=&quot;highlighter-rouge&quot;&gt;array = [one, two, three, four, five]&lt;/code&gt;, to get the first element, use: &lt;code class=&quot;highlighter-rouge&quot;&gt;array[0]&lt;/code&gt;, second element, use: &lt;code class=&quot;highlighter-rouge&quot;&gt;array[1]&lt;/code&gt; and so on. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;array[0]&lt;/code&gt; will return the value ‘one’, using &lt;code class=&quot;highlighter-rouge&quot;&gt;array[1]&lt;/code&gt; will return ‘two’, and the rest respectively.&lt;/p&gt;

&lt;p&gt;Those are some of the basics of arrays in ruby. In my opinion, the important thing to remember is to use the correct index when referring to an element. &lt;strong&gt;Always remember that the index starts at 0 and ends at the size of the array - 1.&lt;/strong&gt; Also, due their ordered nature, arrays are very easy to ‘iterate’, or go over each index, using a for loop or while loop.&lt;/p&gt;

&lt;p&gt;Though hashes in Ruby work in a very similar to arrays, they are slightly different and unique in their own way. Similar to an array, hashes also have a ‘key’ and a ‘value’. The following declares an empty hash in Ruby: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash = {}&lt;/code&gt;, an alternative is &lt;code class=&quot;highlighter-rouge&quot;&gt;hash = Hash.new&lt;/code&gt;, they both do the same thing, create a new, empty hash called hash. However, unlike arrays, in order to store something in a hash, you must always indicate the ‘key’ at which you are storing the data. This is because hashes are not automatically indexed in order like arrays are. Due to their unique, fast and immutable nature, it is best practice to use Ruby symbols as keys when working with hashes, but Ruby allows you to use any type of object as a key. This: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash[:example_key] = &quot;example_value&quot;&lt;/code&gt; will create a new hash value ‘example_value’ at the key ‘:example_key’. Note how just like arrays, you use brackets, ‘[]’, to indicate the key. Also note that you can create a hash with a default value that will automatically assign a default value to any key created without a value like: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash = Hash.new(&quot;default_value&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Retrieval of hash data works just a tad bit differently than arrays, but just slightly. Let’s see another diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/hash.png&quot; alt=&quot;Hash Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, all hashes have a key and a value as we discussed. So, folliwng the diagram, in order to retrieve the data stored at key ‘a’, use: &lt;code class=&quot;highlighter-rouge&quot;&gt;dict['a']&lt;/code&gt;, this will return the value ‘alpha’. The same goes for the rest of the data. Unlike arrays, it is much easier to make sense of the data at each key, because the key and value are paired accordingly. Imagine something like a dictionary, you can just store the definitions of a word at a key and easily retrieve that definition by using the key, a task much harder using an array. That is the basic gist of hashes in Ruby.&lt;/p&gt;

&lt;p&gt;The purpose of this blog post was to explain the basic difference between arrays and hashes in Ruby. I hope after reading the post, you gained some new knowledge that you can use to further your knowledge of Ruby. The best way to understand these concepts is to practice, so go ahead and open up IRB and play around with arrays and hashes! If you enjoyed the blog, please keep following. Until next time, happy coding!&lt;/p&gt;</content><author><name></name></author><summary type="html">Arrays and Hashes in Ruby</summary></entry><entry><title type="html">Journey Into The Matrix</title><link href="/2017/07/16/journey-into-the-matrix.html" rel="alternate" type="text/html" title="Journey Into The Matrix" /><published>2017-07-16T00:00:00-04:00</published><updated>2017-07-16T00:00:00-04:00</updated><id>/2017/07/16/journey-into-the-matrix</id><content type="html" xml:base="/2017/07/16/journey-into-the-matrix.html">&lt;h1 id=&quot;creating-my-site-along-with-my-journey&quot;&gt;Creating My Site along with my Journey&lt;/h1&gt;

&lt;p&gt;Hello and welcome to anyone who stumbled across my blog. My name is Mohammad Amin, most people call me Mo. I am a web-developer currently located in NYC, I have a fascination with JavaScript and Ruby.&lt;/p&gt;

&lt;p&gt;I earned my BA in Computer Science from Hunter College in 2015. Since then I have been developing web-sites professionally on a full-time basis.&lt;/p&gt;

&lt;p&gt;My First job was at &lt;a href=&quot;http://www.wirecare.com&quot;&gt;Techflex&lt;/a&gt; where I helped with their transition from a ASP site to a more modern Rails site. We wrote an in-house e-commerce site from the ground up customized to the structure of the company, using the SQL database that was already in place before. This was my first production web-application and learned a ton building this site. Some interesting aspects were writing ActiveRecord models that play well with the existing database. Another interesting aspect was writing a print-design front end application for the in house printer they have to print labels for wires. This was my first deep-dive into JS and building a functional and automated front-end for client. You can check the &lt;a href=&quot;https://www.wirecare.com/category/heatshrink-tubing/heatshrink-printing&quot;&gt;heat-shrink printing application.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also helped design and build &lt;a href=&quot;https://www.traincreative.org/&quot;&gt;Train Creative.&lt;/a&gt; This project has a Rails back-end as well. This site lets users sign up, pay for and reserve rental space at the local train station. It was challenging figuring how to keep track of what slots of times were booked. There was situations where we had to think about dead-locking, when one user was reserving the last slot and another user tries to book a ticket, there was a collision that had to taken into consideration.&lt;/p&gt;

&lt;p&gt;Currently, I am working as a front-end engineer at &lt;a href=&quot;https://www.law360.com&quot;&gt;Law360.&lt;/a&gt; This is a subscription based news website with millions of page-vies a month. Some features that I have worked on includes infinite-scroll, scrappers, and google-amp page integration.&lt;/p&gt;

&lt;p&gt;Besides working, I also have some other passions and hobbies. I enjoy music a ton and can talk about music for hours, if we ever meet, lets see if our preferences match. I also enjoy watching sports, soccer is my favorite sport and &lt;strong&gt;Arsenal&lt;/strong&gt; is my favortie team. However, I follow pretty much all sports and am an avid supporter of New York teams. I also like nature and outdoors, on a good day, you can find me on the hiking trail.&lt;/p&gt;

&lt;p&gt;I can go on about myself, but no point in that. Let me tell more about why I created this site/blog. I intend to use this site to share my ideas and thoughts on various web development topics as well some personal posts. Over the last couple years I have learned a lot and I have a lot of ideas to share and much more to learn, hope you enjoy my journey through theses posts.&lt;/p&gt;</content><author><name></name></author><summary type="html">Creating My Site along with my Journey</summary></entry></feed>